[{"/Users/wjg/Desktop/Twilio/frontend/src/components/Login.js":"1","/Users/wjg/Desktop/Twilio/frontend/src/App.js":"2","/Users/wjg/Desktop/Twilio/frontend/src/reportWebVitals.js":"3","/Users/wjg/Desktop/Twilio/frontend/src/utils/Socketio.js":"4","/Users/wjg/Desktop/Twilio/frontend/src/index.js":"5","/Users/wjg/Desktop/Twilio/frontend/src/utils/axios.js":"6","/Users/wjg/Desktop/Twilio/frontend/src/components/CallCenter.js":"7","/Users/wjg/Desktop/Twilio/frontend/src/components/CallProgress.js":"8","/Users/wjg/Desktop/Twilio/frontend/src/components/NavBar.js":"9","/Users/wjg/Desktop/Twilio/frontend/src/hooks/useTokenFromLocalStorage.js":"10","/Users/wjg/Desktop/Twilio/frontend/src/hooks/useLocalStorage.js":"11","/Users/wjg/Desktop/Twilio/frontend/src/serviceWorker.js":"12","/Users/wjg/Desktop/Twilio/frontend/src/utils/Axios.js":"13"},{"size":2003,"mtime":1610172314375,"results":"14","hashOfConfig":"15"},{"size":3224,"mtime":1610320048059,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1609820273723,"results":"17","hashOfConfig":"15"},{"size":422,"mtime":1610300257066,"results":"18","hashOfConfig":"15"},{"size":523,"mtime":1610302412402,"results":"19","hashOfConfig":"15"},{"size":121,"mtime":1610172826944,"results":"20","hashOfConfig":"15"},{"size":301,"mtime":1610172142510,"results":"21","hashOfConfig":"15"},{"size":1158,"mtime":1610322053427,"results":"22","hashOfConfig":"15"},{"size":603,"mtime":1610322083617,"results":"23","hashOfConfig":"15"},{"size":783,"mtime":1610302412424,"results":"24","hashOfConfig":"15"},{"size":652,"mtime":1610289469302,"results":"25","hashOfConfig":"15"},{"size":5098,"mtime":1610172807818,"results":"26","hashOfConfig":"15"},{"size":122,"mtime":1610307550506,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1o8sii9",{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wjg/Desktop/Twilio/frontend/src/components/Login.js",[],["60","61"],"/Users/wjg/Desktop/Twilio/frontend/src/App.js",["62","63","64"],"import React, { useCallback, useEffect, useState } from 'react';\nimport Login from './components/Login';\nimport { useImmer } from 'use-immer';\nimport axios from './utils/Axios';\nimport socket from './utils/Socketio';\nimport CallCenter from './components/CallCenter';\nimport useTokenFromLocalStorage from './hooks/useTokenFromLocalStorage';\nimport * as Twilio from 'twilio-client';\n\nfunction App() {\n  const [calls, setCalls] = useImmer({\n    calls: [],\n  });\n\n  const [user, setUser] = useImmer({\n    username: '',\n    mobileNumber: '',\n    verificationCode: '',\n    verificationSent: false,\n  });\n  const [twilioToken, setTwilioToken] = useState();\n\n  const [storedToken, setStoredToken, isValidToken] = useTokenFromLocalStorage(\n    null\n  );\n\n  useEffect(() => {\n    console.log('Twilio token changed');\n    if (twilioToken) {\n      connectTwilioVoiceClient(twilioToken);\n    }\n  }, [twilioToken]);\n\n  useEffect(() => {\n    if (isValidToken) {\n      console.log('Valid token');\n      return socket.addToken(storedToken);\n    }\n    console.log('invalid token');\n    socket.removeToken();\n  }, [isValidToken, storedToken]);\n\n  useEffect(() => {\n    socket.client.on('connect', () => {\n      console.log('Connected');\n    });\n    socket.client.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n    socket.client.on('twilio-token', (data) => {\n      console.log('Receive Token from the backend');\n      setTwilioToken(data.token);\n    });\n\n    socket.client.on('enqueue', ({ data: { CallSid } }) => {\n      setCalls((draft) => {\n        const index = draft.calls.findIndex(\n          ({ CallSid }) => CallSid === CallSid\n        );\n        if (index === -1) {\n          return;\n        }\n        draft.calls[index].CallStatus = 'enqueue';\n      });\n    });\n    return () => {};\n  }, [socket.client]);\n\n  async function sendSmsCode() {\n    console.log('Sending SMS');\n    await axios.post('/login', {\n      to: user.mobileNumber,\n      username: user.username,\n      channel: 'sms',\n    });\n    setUser((draft) => {\n      draft.verificationSent = true;\n    });\n  }\n\n  function connectTwilioVoiceClient(twilioToken) {\n    const device = new Twilio.Device(twilioToken, { debug: true });\n    device.on('error', (error) => {\n      console.error(error);\n    });\n    device.on('incoming', (connection) => {\n      console.log('Incoming from twilio');\n      connection.accept();\n    });\n  }\n  //below is where we verify our user with the JWT token\n  //modified in chapter 24\n  async function sendVerificationCode() {\n    console.log('Sending verification');\n    const response = await axios.post('/verify', {\n      to: user.mobileNumber,\n      code: user.verificationCode,\n      username: user.username,\n    });\n    console.log('received token', response.data.token);\n    setStoredToken(response.data.token);\n  }\n\n  return (\n    <div>\n      {isValidToken ? (\n        <CallCenter calls={calls} /> //chapter 25\n      ) : (\n        <>\n          <CallCenter calls={calls} />\n          <Login\n            user={user}\n            setUser={setUser}\n            sendSmsCode={sendSmsCode}\n            sendVerificationCode={sendVerificationCode}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",["65","66"],"/Users/wjg/Desktop/Twilio/frontend/src/reportWebVitals.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/utils/Socketio.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/index.js",[],["67","68"],"/Users/wjg/Desktop/Twilio/frontend/src/utils/axios.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/components/CallCenter.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/components/CallProgress.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/components/NavBar.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/hooks/useTokenFromLocalStorage.js",["69"],"import { useEffect, useState } from 'react';\nimport useLocalStorage from './useLocalStorage';\nimport Axios from '../utils/Axios';\n\nfunction useTokenFromLocalStorage(initialValue) {\n  const [value, setValue] = useLocalStorage('token', initialValue);\n  const [isValid, setIsValid] = useState(false);\n\n  useEffect(() => {\n    //chapter 41, use effect will change everytime a value above changes\n    checkToken();\n  }, [value]);\n\n  async function checkToken() {\n    //this function will call the backend using Axios\n    const { data } = await Axios.post('/check-token', { token: value });\n    console.log('CheckToken', data);\n    setIsValid(data.isValid);\n  }\n  return [value, setValue, isValid]; //we want our data to access and return these\n}\n\nexport default useTokenFromLocalStorage;\n","/Users/wjg/Desktop/Twilio/frontend/src/hooks/useLocalStorage.js",[],"/Users/wjg/Desktop/Twilio/frontend/src/serviceWorker.js",[],["70","71"],"/Users/wjg/Desktop/Twilio/frontend/src/utils/Axios.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":28},{"ruleId":"80","severity":1,"message":"81","line":58,"column":28,"nodeType":"82","messageId":"83","endLine":58,"endColumn":47},{"ruleId":"84","severity":1,"message":"85","line":67,"column":6,"nodeType":"86","endLine":67,"endColumn":21,"suggestions":"87"},{"ruleId":"72","replacedBy":"88"},{"ruleId":"74","replacedBy":"89"},{"ruleId":"72","replacedBy":"90"},{"ruleId":"74","replacedBy":"91"},{"ruleId":"84","severity":1,"message":"92","line":12,"column":6,"nodeType":"86","endLine":12,"endColumn":13,"suggestions":"93"},{"ruleId":"72","replacedBy":"94"},{"ruleId":"74","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCalls'. Either include it or remove the dependency array. Outer scope values like 'socket.client' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["98"],["96"],["97"],["96"],["97"],"React Hook useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.",["99"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [setCalls]",{"range":"104","text":"105"},"Update the dependencies array to be: [checkToken, value]",{"range":"106","text":"107"},[1807,1822],"[setCalls]",[415,422],"[checkToken, value]"]